// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: verify.proto

package verify

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for VerifyService service

func NewVerifyServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for VerifyService service

type VerifyService interface {
	SendVerify(ctx context.Context, in *VerifyRequest, opts ...client.CallOption) (*VerifyResponse, error)
	CheckVerify(ctx context.Context, in *VerifyRequest, opts ...client.CallOption) (*VerifyResponse, error)
}

type verifyService struct {
	c    client.Client
	name string
}

func NewVerifyService(name string, c client.Client) VerifyService {
	return &verifyService{
		c:    c,
		name: name,
	}
}

func (c *verifyService) SendVerify(ctx context.Context, in *VerifyRequest, opts ...client.CallOption) (*VerifyResponse, error) {
	req := c.c.NewRequest(c.name, "VerifyService.SendVerify", in)
	out := new(VerifyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifyService) CheckVerify(ctx context.Context, in *VerifyRequest, opts ...client.CallOption) (*VerifyResponse, error) {
	req := c.c.NewRequest(c.name, "VerifyService.CheckVerify", in)
	out := new(VerifyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VerifyService service

type VerifyServiceHandler interface {
	SendVerify(context.Context, *VerifyRequest, *VerifyResponse) error
	CheckVerify(context.Context, *VerifyRequest, *VerifyResponse) error
}

func RegisterVerifyServiceHandler(s server.Server, hdlr VerifyServiceHandler, opts ...server.HandlerOption) error {
	type verifyService interface {
		SendVerify(ctx context.Context, in *VerifyRequest, out *VerifyResponse) error
		CheckVerify(ctx context.Context, in *VerifyRequest, out *VerifyResponse) error
	}
	type VerifyService struct {
		verifyService
	}
	h := &verifyServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&VerifyService{h}, opts...))
}

type verifyServiceHandler struct {
	VerifyServiceHandler
}

func (h *verifyServiceHandler) SendVerify(ctx context.Context, in *VerifyRequest, out *VerifyResponse) error {
	return h.VerifyServiceHandler.SendVerify(ctx, in, out)
}

func (h *verifyServiceHandler) CheckVerify(ctx context.Context, in *VerifyRequest, out *VerifyResponse) error {
	return h.VerifyServiceHandler.CheckVerify(ctx, in, out)
}
