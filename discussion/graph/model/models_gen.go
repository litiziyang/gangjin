// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Post struct {
	ID         uint64      `json:"id"`
	Enable     bool        `json:"enable"`
	Discussion *Discussion `json:"discussion"`
}

func (Post) IsEntity() {}

type User struct {
	ID         uint64      `json:"id"`
	Discussion *Discussion `json:"discussion"`
}

func (User) IsEntity() {}

type DiscussionType string

const (
	// 我同意
	DiscussionTypeSquare DiscussionType = "square"
	// 我不同意
	DiscussionTypeConSide DiscussionType = "conSide"
)

var AllDiscussionType = []DiscussionType{
	DiscussionTypeSquare,
	DiscussionTypeConSide,
}

func (e DiscussionType) IsValid() bool {
	switch e {
	case DiscussionTypeSquare, DiscussionTypeConSide:
		return true
	}
	return false
}

func (e DiscussionType) String() string {
	return string(e)
}

func (e *DiscussionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscussionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscussionType", str)
	}
	return nil
}

func (e DiscussionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
